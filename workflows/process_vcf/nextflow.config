params {
  // INFO fields to be carried over (must be type double)
  qc_metrics = "ABE ABZ BQZ CYZ FIBC_I FIBC_P HWE_SLP_I HWE_SLP_P IOR NM0 NM1 NMZ STZ SVM"

  // Columns and INFO tags to annotate from sites bcfs into histogram bcfs
  anno_fields="QUAL,FILTER,ABE,ABZ,BQZ,CYZ,FIBC_I,FIBC_P,HWE_SLP_I,HWE_SLP_P,IOR,NM0,NM1,NMZ,STZ,SVM"

  // Samples file is text with one sample id per line.
  // Use NO_FILE to indicate the optional samples list will be generated from samples in vcf.
  //   I.e.  samples_path    = "NO_FILE"
  samples_path = "/home/grosscol_umich_edu/freeze10_corrected_sample_ids.txt"

  // Glob or list of globs for BCFs with DP & GQ fields (full bcfs)
  // E.g. to proccess only chr11:
  //   "/mnt/vcfs/freeze10/genotypes/merged/chr11/*.{bcf,bcf.csi}"

  bcfs_full = ["data/bcfs/full/chr1/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr2/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr3/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr4/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr5/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr6/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr7/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr8/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr9/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr10/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr11/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr12/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr13/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr14/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr15/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr16/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr17/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr18/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr19/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr20/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr21/*.{bcf,bcf.csi}",
               "data/bcfs/full/chr22/*.{bcf,bcf.csi}",
               "data/bcfs/full/chrX/*.{bcf,bcf.csi}"]

  // BCFS with qc_metrics (sites bcfs)
  // A directory containing bcf files (freeze10.topmed.${chr}.filtered.sites.bcf)
  //  used to make symlink to directory and pull the header from a single file for annotation.
  bcfs_sites_dir  = "data/bcfs/sites"

  vep {
    static_flags = ["--sift b",  "--polyphen b", "--ccds",       "--uniprot",    "--hgvs", 
                    "--symbol",  "--numbers",    "--domains",    "--regulatory", "--canonical",
                    "--protein", "--biotype",    "--af",         "--af_1kg",     "--af_esp",
                    "--af_gnomad", "--pubmed",   "--shift_hgvs 0", "--allele_number", 
                    "--buffer_size 50000", "--format vcf", "--cache", "--offline", "--vcf",
                    " --compress_output bgzip", "--no_stats"
                   ].join(" ")

    loftee_path              = "/apps/loftee"
    loftee_human_ancestor_fa = "/apps/loftee_data/human_ancestor.fa.gz"
    loftee_conservation_file = "/apps/loftee_data/loftee.sql"
    loftee_gerp_bigwig       = "/apps/loftee_data/gerp_conservation_scores.homo_sapiens.GRCh38.bw"
    ref_fasta                = "/apps/reference/hs38DH.fa"
    cache                    = "/apps/vep_cache"
  }

  cadd {
    script = "/apps/data_prep/tools/py_tools/add_cadd_scores.py"
    tsv_path = "/apps/reference/cadd/whole_genome_SNVs.tsv.gz"
  }

  percentiles {
     qc_metrics = ["ABE", "ABZ", "BQZ", "CYZ", "FIBC_I", "FIBC_P", "HWE_SLP_I",
       "HWE_SLP_P", "IOR", "NM0", "NM1", "NMZ", "STZ", "SVM", "QUAL"]
  }
}

executor {
  $slurm {
    queueSize = 1000
  }

  $local {
    // Number of cores to use for processes.
    cpus = 3 
  }
}

trace {
  enabled = true
  file = 'process_vcf_trace.tsv'
  fields = 'task_id,name,status,realtime,%cpu,rss,peak_rss,vmem,peak_vmem'
}

// To run on cluster use: nextflow run vcf.nf -profile slurm
profiles {
  standard {
    process.executor = 'local'
  }

  slurm {
    process {
      executor = 'slurm'
      errorStrategy = 'retry'
      maxRetries = 3
      module = ['vep', 'htslib','samtools', 'bam_util', 'data_prep', 'python3', 'bcftools']

      withLabel: annotate {
        queue = "annotate_q"
        memory = "0.5 GB"
        cpus = 2
      }

      withLabel: vep {
        queue = "vep_q"
        cpus = 2
      }

      withLabel: merge {
        queue = "merge_q"
        cpus = 2
        scratch = true
        stageInMode = "copy"
        stageOutMode = "copy"
      }

      withLabel: small {
        queue = "small_jobs_q"
        memory = "1.5 GB"
        cpus = 1
      }

      withLabel: anyqueue {
        queue = "bravo,highcpu,highmem"
        memory = "1.5 GB"
        cpus = 2
      }

      withLabel: highmem {
        queue = "highmem"
        memory = "10 GB"
        cpus = 2
      }

      withLabel: highcpu {
        queue = "highcpu"
        memory = "1.5 GB"
        cpus = 2
      }

    }
  }
}
