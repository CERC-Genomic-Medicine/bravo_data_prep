params {
  /*********
  * Inputs *
  *********/
  reference_path = "data/ref/hs38DH.fa"

  // Crams base directory will be symlinked to for the processes.
  // Allows the processes to access cram files by list of relative paths.
  cram_base_dir = "data"

  // Glob of cram files depends on cram_base_dir being symlinked in workdir 
  cram_files = "data/crams/*.cram"

  /***********
  * Settings *
  ***********/
  // Which chromosomes to process
  chromosomes = ["chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10",
                 "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19",
                 "chr20", "chr21", "chr22"]

  prune_limits = [1.00, 0.25, 0.50, 0.75]

  // How many pileups to aggregate per process/
  grp_size = 5

  // How many crams to sample for pileup (must be less than grp_size^4)
  n_indiv = 500

  // How many chunks to break up final aggregation into for summarization?
  num_chunks = 40

  // Lenghts used in stopping conditions for processing by position
  chrom_lengths = [
    chr1:  248956422,
    chr2:  242193529,
    chr3:  198295559,
    chr4:  190214555,
    chr5:  181538259,
    chr6:  170805979,
    chr7:  159345973,
    chr8:  145138636,
    chr9:  138394717,
    chr10: 133797422,
    chr11: 135086622,
    chr12: 133275309,
    chr13: 114364328,
    chr14: 107043718,
    chr15: 101991189,
    chr16: 90338345,
    chr17: 83257441,
    chr18: 80373285,
    chr19: 58617616,
    chr20: 64444167,
    chr21: 46709983,
    chr22: 50818468,
    chrX:  156040895,
    chrY:  57227415
  ]
}

executor {
  $slurm {
    queueSize = 1000
    jobName = { "bravo_coverage" }
  }

  $local {
    cpus = 3 
   }
}

// To run on cluster use: nextflow run Coverage.nf -profile slurm
profiles {
  standard {
    process.executor = 'local'
  }

  slurm {
    process {
      executor = 'slurm'
      errorStrategy = 'retry'
      maxRetries = 10
      module = ['htslib','samtools', 'bam_util', 'data_prep', 'python3', 'miller']

      withLabel: anyqueue {
        queue = "bravo,highcpu,highmem"
        memory = "0.75 GB"
        cpus = 1
      }

      withLabel: highmem {
        queue = "highmem"
        memory = "16 GB"
        cpus = 2
      }

      withLabel: highcpu {
        queue = "highcpu"
        memory = "0.75 GB"
        cpus = 1
      }

      withLabel: small {
        queue = "small_jobs_q"
        memory = "1.5 GB"
        cpus = 1
      }

      withLabel: early_agg {
        queue = "agg_q,vep_q"
        memory = "10 GB"
        cpus = 2
      }

      withLabel: late_agg {
        queue = "agg_demand_q"
        memory = "30 GB"
        cpus = 2
      }
    }
  }
}
